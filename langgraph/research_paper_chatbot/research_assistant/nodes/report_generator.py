import os
from datetime import datetime
from typing import Dict, Any, List
import logging

logger = logging.getLogger(__name__)

class ReportGeneratorNode:
    def __init__(self, output_dir: str = "../notes"):
        self.output_dir = os.path.abspath(output_dir)
        os.makedirs(self.output_dir, exist_ok=True)
    
    def _sanitize_filename(self, title: str) -> str:
        """Convert a title to a safe filename."""
        import re
        return re.sub(r'[^\w\s-]', '', title).strip().replace(' ', '_')
    
    def _generate_markdown(self, state: Dict[str, Any]) -> str:
        """Generate markdown content from the research data."""
        topic = state.get("topic", "Research Topic")
        date_str = datetime.now().strftime("%B %d, %Y")
        
        # Get papers data
        papers = state.get("search_results", [])
        
        # Generate markdown content
        content = f"# {topic}: Research Summary\n\n"
        content += f"*Generated on: {date_str}*\n\n"
        
        # Table of Contents
        content += "## Table of Contents\n"
        content += "1. [Introduction](#introduction)\n"
        content += "2. [Key Research Papers](#key-research-papers)\n"
        content += "3. [Common Themes](#common-themes)\n"
        content += "4. [Technical Approaches](#technical-approaches)\n"
        content += "5. [Challenges and Limitations](#challenges-and-limitations)\n"
        content += "6. [Future Directions](#future-directions)\n"
        content += "7. [References](#references)\n\n"
        
        # Introduction
        explanation = state.get("explanation", "")
        content += f"## Introduction\n\n{explanation}\n\n"
        
        # Key Research Papers
        content += "## Key Research Papers\n\n"
        for i, paper in enumerate(papers[:10], 1):  # Limit to top 10 papers
            title = paper.get("title", f"Paper {i}")
            snippet = paper.get("snippet", "No abstract available.")
            link = paper.get("link", "#")
            
            content += f"### {i}. {title}\n"
            if link and link != "#":
                content += f"**Source:** [{link}]({link})  \n"
            if "year" in paper:
                content += f"**Year:** {paper['year']}  \n"
            if "publication_info" in paper:
                content += f"**Published in:** {paper['publication_info']}  \n"
            content += f"\n{snippet}\n\n"
        
        # Common Themes (extracted from related topics and summaries)
        content += "## Common Themes\n\n"
        related_topics = state.get("related_topics", [])
        if related_topics:
            content += "### Key Areas:\n"
            for topic in related_topics:
                content += f"- {topic}\n"
            content += "\n"
        
        # Technical Approaches (placeholder - would be enhanced with actual content)
        content += "## Technical Approaches\n\n"
        content += "*Technical approaches would be extracted from paper summaries and content analysis.*\n\n"
        
        # Challenges and Limitations
        content += "## Challenges and Limitations\n\n"
        content += "1. **Data Privacy and Security**\n"
        content += "   - Handling sensitive information in AI training\n"
        content += "   - Compliance with regulations (GDPR, CCPA, etc.)\n\n"
        
        content += "2. **Model Robustness**\n"
        content += "   - Vulnerability to adversarial attacks\n"
        content += "   - Handling novel attack vectors\n\n"
        
        # Future Directions
        content += "## Future Directions\n\n"
        content += "1. **Explainable AI (XAI)**\n"
        content += "   - Making AI decisions more interpretable\n"
        content += "   - Building trust in AI-driven security systems\n\n"
        
        content += "2. **Federated Learning**\n"
        content += "   - Collaborative model training without sharing raw data\n"
        content += "   - Privacy-preserving threat intelligence sharing\n\n"
        
        # References
        content += "## References\n\n"
        for i, paper in enumerate(papers[:10], 1):  # Limit to top 10 papers
            title = paper.get("title", f"Paper {i}")
            link = paper.get("link", "#")
            content += f"{i}. [{title}]({link})\n"
        content += "\n---\n"
        content += "*This report was automatically generated by the Research Assistant.*"
        
        return content
    
    def __call__(self, state: Dict[str, Any]) -> Dict[str, Any]:
        """Generate and save a comprehensive markdown report."""
        try:
            # Generate markdown content
            markdown_content = self._generate_markdown(state)
            
            # Create a safe filename
            safe_topic = self._sanitize_filename(state.get("topic", "research"))
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            filename = f"{safe_topic}_{timestamp}.md"
            filepath = os.path.join(self.output_dir, filename)
            
            # Write to file
            with open(filepath, 'w', encoding='utf-8') as f:
                f.write(markdown_content)
            
            logger.info(f"Comprehensive report saved to: {filepath}")
            state["report_path"] = filepath
            
        except Exception as e:
            logger.error(f"Error generating report: {str(e)}")
            state["error"] = f"Failed to generate report: {str(e)}"
        
        return state
